{"version":3,"sources":["components/PokeCard.js","images/bug.svg","images/dark.svg","images/dragon.svg","images/electric.svg","images/fairy.svg","images/fighting.svg","images/fire.svg","images/flying.svg","images/ghost.svg","images/grass.svg","images/ground.svg","images/ice.svg","images/normal.svg","images/poison.svg","images/psychic.svg","images/rock.svg","images/steel.svg","images/water.svg","components/PokeCardFull.js","components/PokeCardMini.js","api/pokeapi.js","components/SearchSuggestions.js","components/SearchBar.js","components/LoaderButtons.js","components/App.js","index.js"],"names":["PokeCard","props","styles","gradient_normal","gradient_fire","gradient_water","gradient_electric","gradient_grass","gradient_ice","gradient_fighting","gradient_poison","gradient_ground","gradient_flying","gradient_psychic","gradient_bug","gradient_rock","gradient_ghost","gradient_dragon","gradient_dark","gradient_steel","gradient_fairy","solid_normal","solid_fire","solid_water","solid_electric","solid_grass","solid_ice","solid_fighting","solid_poison","solid_ground","solid_flying","solid_psychic","solid_bug","solid_rock","solid_ghost","solid_dragon","solid_dark","solid_steel","solid_fairy","textColor","type","getContrastBg","typeListIcons","input","types","bug","Bug","dark","Dark","dragon","Dragon","electric","Electric","fairy","Fairy","fighting","Fighting","fire","Fire","flying","Flying","ghost","Ghost","grass","Grass","ground","Ground","ice","Ice","normal","Normal","poison","Poison","psychic","Psychic","rock","Rock","steel","Steel","water","Water","i","length","push","name","map","index","className","src","eval","alt","typeListText","style","background","border","abilityListText","abilities","ability","openFullDisplay","e","document","getElementById","target","id","display","closeFullDisplay","allCards","entries","el","value","pokemon","pokemonIndex","data","onClick","PokeCardFull","typeName","toggleDisplay","checkStatus","statDisplay","moveDisplay","checked","statBars","stats","percentage","max","jsx","getTotalStats","this","reduce","acc","base_stat","perc","String","width","htmlFor","movePool","move","color","height","weight","sprites","front_default","filter","onChange","moves","PokeCardMini","axios","create","baseURL","SearchSuggestions","testLog","console","log","innerHTML","suggestionsList","includes","query","SearchBar","state","term","pokeList","getAllEntries","a","pokeapi","get","pokeEntries","allPokeEntries","results","setState","onFormSubmit","event","preventDefault","onSubmit","spellCheck","React","Component","LoaderButtons","loadNext","limit","loadAll","App","pokeData","pokeLimit","updateCount","populatePokeList","emptyArr","prevState","onSearchSubmit","params","response","loadMorePokemon","loadAllPokemon","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.814b3ad3.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/_pokecard.scss';\nimport '../styles/svg_icons.css';\n\nimport Bug from '../images/bug.svg';\nimport Dark from '../images/dark.svg';\nimport Dragon from '../images/dragon.svg';\nimport Electric from '../images/electric.svg';\nimport Fairy from '../images/fairy.svg';\nimport Fighting from '../images/fighting.svg';\nimport Fire from '../images/fire.svg';\nimport Flying from '../images/flying.svg';\nimport Ghost from '../images/ghost.svg';\nimport Grass from '../images/grass.svg';\nimport Ground from '../images/ground.svg';\nimport Ice from '../images/ice.svg';\nimport Normal from '../images/normal.svg';\nimport Poison from '../images/poison.svg';\nimport Psychic from '../images/psychic.svg';\nimport Rock from '../images/rock.svg';\nimport Steel from '../images/steel.svg';\nimport Water from '../images/water.svg';\n\nimport PokeCardFull from './PokeCardFull';\nimport PokeCardMini from './PokeCardMini';\n\nconst PokeCard = (props) => {\n\n    //style object for card backgrounds\n    let styles = {\n        gradient_normal: \"linear-gradient(to top left, rgba(169, 169, 169, 0.95), rgba(169, 169, 169, 0.6))\",\n        gradient_fire: \"linear-gradient(to top left, rgba(238, 129, 48, 0.95), rgba(238, 129, 48, 0.6))\",\n        gradient_water: \"linear-gradient(to top left, rgba(99, 144, 240, 0.95), rgba(99, 144, 240, 0.6))\",\n        gradient_electric: \"linear-gradient(to top left, rgba(247, 208, 44, 0.95), rgba(247, 208, 44, 0.6))\",\n        gradient_grass: \"linear-gradient(to top left, rgba(122, 199, 76, 0.95), rgba(122, 199, 76, 0.6))\",\n        gradient_ice: \"linear-gradient(to top left, rgba(150, 217, 214, 0.95), rgba(150, 217, 214, 0.6))\",\n        gradient_fighting: \"linear-gradient(to top left, rgba(194, 46, 40, 0.95), rgba(194, 46, 40, 0.6))\",\n        gradient_poison: \"linear-gradient(to top left, rgba(163, 62, 161, 0.95), rgba(163, 62, 161, 0.6))\",\n        gradient_ground: \"linear-gradient(to top left, rgba(226, 191, 101, 0.95), rgba(226, 191, 101, 0.6))\",\n        gradient_flying: \"linear-gradient(to top left, rgba(169, 143, 243, 0.95), rgba(169, 143, 243, 0.6))\",\n        gradient_psychic: \"linear-gradient(to top left, rgba(249, 85, 135, 0.95), rgba(249, 85, 135, 0.6))\",\n        gradient_bug: \"linear-gradient(to top left, rgba(166, 185, 26, 0.95), rgba(166, 185, 26, 0.6))\",\n        gradient_rock: \"linear-gradient(to top left, rgba(182, 161, 54, 0.95), rgba(182, 161, 54, 0.6))\",\n        gradient_ghost: \"linear-gradient(to top left, rgba(115, 87, 151, 0.95), rgba(115, 87, 151, 0.6))\",\n        gradient_dragon: \"linear-gradient(to top left, rgba(111, 53, 252, 0.95), rgba(111, 53, 252, 0.6))\",\n        gradient_dark: \"linear-gradient(to top left, rgba(112, 87, 70, 0.95), rgba(112, 87, 70, 0.6))\",\n        gradient_steel: \"linear-gradient(to top left, rgba(183, 183, 206, 0.95), rgba(183, 183, 206, 0.6))\",\n        gradient_fairy: \"linear-gradient(to top left, rgba(214, 133, 173, 0.95), rgba(214, 133, 173, 0.6))\",\n\n        solid_normal: \"rgba(169, 169, 169)\",\n        solid_fire: \"rgba(238, 129, 48)\",\n        solid_water: \"rgba(99, 144, 240)\",\n        solid_electric: \"rgba(247, 208, 44)\",\n        solid_grass: \"rgba(122, 199, 76)\",\n        solid_ice: \"rgba(150, 217, 214)\",\n        solid_fighting: \"rgba(194, 46, 40)\",\n        solid_poison: \"rgba(163, 62, 161)\",\n        solid_ground: \"rgba(226, 191, 101)\",\n        solid_flying: \"rgba(169, 143, 243)\",\n        solid_psychic: \"rgba(249, 85, 135)\",\n        solid_bug: \"rgba(166, 185, 26)\",\n        solid_rock: \"rgba(182, 161, 54)\",\n        solid_ghost: \"rgba(115, 87, 151)\",\n        solid_dragon: \"rgba(111, 53, 252)\",\n        solid_dark: \"rgba(112, 87, 70)\",\n        solid_steel: \"rgba(183, 183, 206)\",\n        solid_fairy: \"rgba(214, 133, 173)\"\n    };\n\n    //text color changer for managing background contrast\n    const textColor = (type) => {\n        if (type === 'grass' || type === 'water' || type === 'poison' || type === 'fighting' || type === 'dragon' || type === 'dark' || type === 'ghost' || type === 'psychic') {\n            return '#DCDCDC';\n        } else {\n            return '#2F4F4F';\n        };\n    };\n\n    //for getting the inverse bg color of the text color\n    const getContrastBg = (type) => {\n        if (type === 'grass' || type === 'water' || type === 'poison' || type === 'fighting' || type === 'dragon' || type === 'dark' || type === 'ghost' || type === 'psychic') {\n            return '#2F4F4F';\n        } else {\n            return '#DCDCDC';\n        };\n    }\n\n    //function for getting JSX img list of type icons\n    const typeListIcons = (input) => {\n        let types = [];\n\n        //re-assigning imported variables to local variables for easier use\n        const [bug, dark, dragon, electric, fairy, fighting, fire, flying, ghost, grass, ground, ice, normal, poison, psychic, rock, steel, water] = [Bug, Dark, Dragon, Electric, Fairy, Fighting, Fire, Flying, Ghost, Grass, Ground, Ice, Normal, Poison, Psychic, Rock, Steel, Water];\n\n        for (let i = 0; i < input.length; i++) {\n            types.push(input[i].type.name);\n        };\n\n        return types.map((input, index) => <img key={`pk-type-icon-${index}`} className={`icon ${input}`} src={eval(input)} alt={`${input} icon`}/>);\n    };\n\n     //function for getting JSX div list of type names\n    const typeListText = (input, type) => {\n        let types = [];\n\n        for (let i = 0; i < input.length; i++) {\n            types.push(input[i].type.name);\n        };\n\n        return types.map((input, index) => \n            <div key={`pk-type-text-${index}`} className=\"pokecard-full__general-info__type-container--type\" style={{background: eval(`styles.gradient_${input}`), border: `2px solid ${textColor(type)}`}}>\n                {input}\n            </div>\n        );\n    };\n\n    //function for getting JSX div list of ability names\n    const abilityListText = (input, type) => {\n        let abilities = [];\n\n        for (let i = 0; i < input.length; i++) {\n            abilities.push(input[i].ability.name);\n        };\n\n        return abilities.map((input, index) => \n            <div key={`pk-ability-text-${index}`} className=\"pokecard-full__general-info__ability-container--ability\" style={{background: getContrastBg(type), border: `2px solid ${textColor(type)}`}}>\n                {input}\n            </div>\n        );\n    };\n\n    //functions for click events toggling display for full pokemon cards\n    function openFullDisplay(e) {\n        document.getElementById(`full-display-${e.target.id}`).style.display = \"flex\";\n        document.getElementById(`display-${e.target.id}`).style.display = \"block\";\n    };\n    function closeFullDisplay(e) {\n        document.getElementById(`full-${e.target.id}`).style.display = \"none\";\n        document.getElementById(`${e.target.id}`).style.display = \"none\";\n    };\n    \n    //function for creating all ui cards by looping through prop data passed from App.js\n    const allCards = props.entries.map((el, value) => {\n\n        // let typeName = el.data.types[0].type.name; //shortcut for arguments\n\n        //NOTE 20/11/20 ::: make a color for normal type so when the full display for a normal pokemon pops up it isn't transparent!\n\n        return (\n            <article className=\"pokemon\" key={`pokemon-entry-${value}`}>\n\n                <PokeCardMini \n                    pokemon={el}\n                    pokemonIndex={value}\n                    styles={styles}\n                    textColor={textColor}\n                    typeListIcons={typeListIcons}\n                    openFullDisplay={openFullDisplay}\n                />\n\n                <section \n                    key={`pokemon-full-${value}-blur`}\n                    className=\"full-card-blur\"\n                    id={`display-pk-${el.data.id}`}\n                    onClick={closeFullDisplay}>\n                </section>\n\n                <PokeCardFull \n                    pokemon={el}\n                    pokemonIndex={value}\n                    styles={styles}\n                    textColor={textColor}\n                    getContrastBg={getContrastBg}\n                    typeListText={typeListText}\n                    abilityListText={abilityListText}\n                />\n\n            </article>\n        );\n    });\n\n    return(\n        <div className='main-display'>\n            {allCards}\n        </div>\n    );\n};\n\nexport default PokeCard;","export default __webpack_public_path__ + \"static/media/bug.204df919.svg\";","export default __webpack_public_path__ + \"static/media/dark.27fdc7ed.svg\";","export default __webpack_public_path__ + \"static/media/dragon.9d32757b.svg\";","export default __webpack_public_path__ + \"static/media/electric.bc35c5a3.svg\";","export default __webpack_public_path__ + \"static/media/fairy.767c2f56.svg\";","export default __webpack_public_path__ + \"static/media/fighting.f20d1bd2.svg\";","export default __webpack_public_path__ + \"static/media/fire.e0bd7fca.svg\";","export default __webpack_public_path__ + \"static/media/flying.d1778503.svg\";","export default __webpack_public_path__ + \"static/media/ghost.ddf26831.svg\";","export default __webpack_public_path__ + \"static/media/grass.e09623e3.svg\";","export default __webpack_public_path__ + \"static/media/ground.e567f4fc.svg\";","export default __webpack_public_path__ + \"static/media/ice.cd2f9043.svg\";","export default __webpack_public_path__ + \"static/media/normal.2ba66dd5.svg\";","export default __webpack_public_path__ + \"static/media/poison.43956925.svg\";","export default __webpack_public_path__ + \"static/media/psychic.67439878.svg\";","export default __webpack_public_path__ + \"static/media/rock.61a8428d.svg\";","export default __webpack_public_path__ + \"static/media/steel.cb91a92a.svg\";","export default __webpack_public_path__ + \"static/media/water.b6d13329.svg\";","import React from 'react';\nimport '../styles/_pokecard__full.scss';\nimport '../styles/_pokecard__full--detailed-info.scss';\n\nconst PokeCardFull = (props) => {\n\n    const { pokemon, pokemonIndex, styles, textColor, getContrastBg, typeListText, abilityListText } = props;\n\n    let typeName = pokemon.data.types[0].type.name;\n\n    //function for toggling between base stat and move pool view\n    function toggleDisplay() {\n        let checkStatus = document.getElementById(`switch-${pokemonIndex}`);\n        let statDisplay = document.getElementById(`stat-display-${pokemonIndex}`);\n        let moveDisplay = document.getElementById(`move-display-${pokemonIndex}`);\n\n        if (checkStatus.checked === false) {\n            statDisplay.style.display = \"flex\";\n            moveDisplay.style.display = \"none\";\n        } else {\n            statDisplay.style.display = \"none\";\n            moveDisplay.style.display = \"grid\";\n        }\n\n    };\n\n    //function for getting JSX for stat bars. Starting point = el.data.stats for input\n    const statBars = (input, type) => {\n        let stats = {\n            name: ['HP', 'Attack', 'Defense', 'Sp. Attack', 'Sp. Defense', 'Speed', 'Total'], //name of each stat including \"total\"\n            value: [], //value for each individual stat\n            percentage: [], //percentage for width styling\n            max: [255, 190, 230, 194, 230, 180, 780], //max value of each stat\n            jsx: [], //jsx elements to  be returned later\n\n            getTotalStats: function() {\n                let max = this.value.reduce((el, acc) => el + acc);\n                this.value.push(max);\n            }\n        };\n\n        //getting data per pokemon for stat values\n        for (let i = 0; i < input.length; i++) {\n            stats.value.push(input[i].base_stat);\n        };\n\n        stats.getTotalStats();\n\n        for (let i = 0; i < stats.value.length; i++) {\n            let perc;\n\n            perc = (stats.value[i] / stats.max[i]) * 100;\n            perc = perc + '%';\n\n            stats.percentage.push(String(perc));\n        };\n\n        for (let i = 0; i < stats.value.length; i++) {\n            stats.jsx.push(\n                <div className=\"stat\" key={`stat-${stats.name[i]}`}>\n                    <div className=\"stat__container\" key={`stat-container-${stats.name[i]}`} style={{border: `2px solid ${textColor(typeName)}`}}>\n                        <div className=\"stat__container--stat\" key={`stat-bar-${stats.name[i]}`} id={`stat-bar-${stats.name[i]}`} style={{width: stats.percentage[i], background: getContrastBg(typeName)}}>\n                            <div className=\"stat__container--stat--value\" key={`stat-bar-value-${stats.name[i]}`}>{stats.value[i]}</div>\n                        </div>\n                    </div>\n                    <label className=\"stat--label\" key={`stat-label-${stats.name[i]}`} htmlFor={`stat-bar-${stats.name[i]}`}>{stats.name[i]}</label>\n                </div>\n            );\n        };\n\n        return stats.jsx; //array of jsx generated from for looping over stats obj\n        \n    };\n\n    const movePool = (input, type) => { //input = pokemon.data.moves\n        return input.map((el, index) => \n            <div className=\"move\" key={`pk-move-${index}`} style={{background: getContrastBg(typeName), border: `2px solid ${textColor(typeName)}`}}>\n                {el.move.name}\n            </div>\n        );\n    };\n\n    return (\n        <section key={`pokemon-full-${pokemonIndex}`} id={`full-display-pk-${pokemon.data.id}`} className=\"pokecard-full\" style={{background: eval(`styles.solid_${typeName}`)}}>\n                    \n            <div className=\"pokecard-full__general-info\" style={{color: textColor(typeName)}}>\n\n                <div className=\"pokecard-full__general-info--id\">{`Game ID: #${pokemon.data.id}`}</div>\n                <div className=\"pokecard-full__general-info--height\">{`Height: ${pokemon.data.height / 10}m`}</div>\n                <div className=\"pokecard-full__general-info--weight\">{`Weight: ${pokemon.data.weight / 10}kg`}</div>\n\n                <div className=\"pokecard-full__general-info__type-container\">\n                    <span>Type:</span>\n                    <div style={{color: textColor(typeName)}}>\n                        {typeListText(pokemon.data.types, typeName)}\n                    </div>\n                </div>\n\n                <div className=\"pokecard-full__general-info__ability-container\">\n                    <span>Abilities:</span>\n                    <div className=\"ability-flex-container\" >\n                        {abilityListText(pokemon.data.abilities, typeName)}\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"pokecard-full__visual\">\n\n                <div className=\"pokecard-full__visual--name\" key={`pk-name-${pokemonIndex}`} style={{color: textColor(typeName)}}>\n                    {pokemon.data.name}\n                </div>\n\n                <img\n                    key={`pk-sprite-${pokemonIndex}`}\n                    src={pokemon.data.sprites.front_default}\n                    alt={`sprite for ${pokemon.data.name}`}\n                    className=\"pokecard-full__visual--sprite\"\n                    style={{filter: `drop-shadow(1.5px 3px 3px #2F4F4F`}}\n                />\n\n            </div>\n\n            <div className=\"pokecard-full__detailed-info\">\n\n                <section className=\"info-toggle\" style={{color: textColor(typeName)}}>\n                    <span className=\"info-toggle--current-label\">Stats</span>\n                    <input type=\"checkbox\" id={`switch-${pokemonIndex}`} className=\"info-toggle--switch\" onChange={toggleDisplay}/>\n                    <label htmlFor={`switch-${pokemonIndex}`} className=\"info-toggle--switch--label\"></label>\n                    <span className=\"info-toggle--current-label\">Moves</span>\n                </section>\n                \n                <section className=\"stat-display\" id={`stat-display-${pokemonIndex}`} style={{color: textColor(typeName)}}>\n                    {statBars(pokemon.data.stats)}\n                </section>\n\n                <section className=\"move-display\" id={`move-display-${pokemonIndex}`} style={{color: textColor(typeName)}}>\n                    {movePool(pokemon.data.moves)}\n                </section>\n\n            </div>\n\n        </section>\n    );\n\n};\n\nexport default PokeCardFull;","import React from 'react';\nimport '../styles/_pokecard.scss';\n\nconst PokeCardMini = (props) => {\n\n    const { pokemon, pokemonIndex, styles, textColor, typeListIcons, openFullDisplay } = props;\n\n    let typeName = pokemon.data.types[0].type.name;\n\n    return (\n        <section key={`pokemon-mini-${pokemonIndex}`} className=\"main-display__pokecard\" style={{background: eval(`styles.gradient_${typeName}`)}} onClick={openFullDisplay}>\n\n            <div className=\"main-display__pokecard__info\" key={`pk-info-display-${pokemonIndex}`}>\n                <div key={`pk-types-${pokemonIndex}`} className=\"main-display__pokecard__info--types\">\n                    {typeListIcons(pokemon.data.types)}\n                </div>\n                <div className=\"main-display__pokecard__info--number\" key={`pk-id-${pokemonIndex}`} style={{color: textColor(typeName)}}>\n                    {`#${pokemon.data.id}`}\n                </div>\n            </div>\n\n            <img\n                key={`pk-sprite-${pokemonIndex}`}\n                src={pokemon.data.sprites.front_default}\n                alt={`sprite for ${pokemon.data.name}`}\n                className=\"main-display__pokecard--sprite\"\n                style={{filter: `drop-shadow(1.5px 3px 3px #2F4F4F`}}\n            />\n\n            <div className=\"main-display__pokecard--name\" key={`pk-name-${pokemonIndex}`} style={{color: textColor(typeName)}}>\n                {pokemon.data.name}\n            </div>\n\n            <div\n                key={`pokemon-selector-${pokemon.data.id}`}\n                id={`pk-${pokemon.data.id}`}\n                className=\"pokecard--mask\">\n            </div>\n\n        </section>\n    );\n\n};\n\nexport default PokeCardMini;","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://pokeapi.co/api/v2/'\n});","import React from 'react';\nimport '../styles/_suggestions.scss';\n\nconst SearchSuggestions = (props) => {\n\n    const testLog = (e) => {\n        console.log(e.target.innerHTML);\n    }\n\n    const suggestions = props.entries.filter(el => el.name.includes(props.query));\n\n    const suggestionsList = suggestions.map((el, value) => {\n        if (props.query !== '') {\n            return (\n                <li key={value} className=\"suggestions__item\">\n                    <span onClick={testLog}>{el.name}</span>\n                </li>\n            )\n        }\n    });\n\n    return (\n        <ul className=\"suggestions\">\n            {suggestionsList}\n        </ul>\n    );\n};\n\nexport default SearchSuggestions;","import React from 'react';\nimport pokeapi from '../api/pokeapi';\nimport SearchSuggestions from './SearchSuggestions';\n\nimport '../styles/_searchbar.scss';\n\nclass SearchBar extends React.Component {\n\n    state = {term: '', pokeList: []};\n\n    getAllEntries = async() => {\n        const pokeEntries = await pokeapi.get('/pokemon?limit=2000');\n\n        let allPokeEntries = pokeEntries.data.results;\n\n        this.setState({pokeList: allPokeEntries});\n    };\n\n    componentDidMount() {\n        this.getAllEntries();\n    };\n\n    onFormSubmit = (event) => {\n        event.preventDefault();\n        \n        this.props.onSubmit(this.state.term);\n    };\n    \n    render() {\n        return(\n            <nav className=\"searchbar\">\n                <form onSubmit={this.onFormSubmit} className=\"searchbar__form\">\n                    <div className=\"searchbar__form--field\">\n                        <label>Pokemon Search</label>\n                        <input\n                            type=\"text\"\n                            spellCheck=\"false\"\n                            onChange={(e) => this.setState({term: e.target.value})}\n                            value={this.state.term}\n                        />\n                        <SearchSuggestions query={this.state.term} entries={this.state.pokeList}/>\n                    </div>\n                </form>\n            </nav>\n        )\n    }\n};\n\nexport default SearchBar;","import React from 'react';\nimport '../styles/_loaderButton.scss';\n\nconst LoaderButtons = (props) => {\n\n    return(\n        <div className=\"loader-button-container\">\n            <div \n                className=\"loader-button-container__btn\"\n                onClick={props.loadNext}\n                style={{display: `${props.limit === 893 ? 'none' : 'block'}`}}>\n                    Show more\n            </div>\n            <div \n                className=\"loader-button-container__btn\"\n                onClick={props.loadAll}\n                style={{display: `${props.limit === 893 ? 'none' : 'block'}`}}>\n                    Load all\n            </div>\n        </div>\n    );\n};\n\nexport default LoaderButtons;","import React from 'react';\nimport pokeapi from '../api/pokeapi';\n\nimport SearchBar from './SearchBar';\nimport PokeCard from './PokeCard';\nimport LoaderButtons from './LoaderButtons';\n\nclass App extends React.Component {\n\n    state = { pokeData: [], pokeList: [], pokeLimit: 47, updateCount: 0 };\n\n    //use this.state.pokeLimit to limit how many API calls are made. A button below the main-display grid will give the option after scrolling to the bottom to load the next 100 \n\n    populatePokeList = async(limit) => {\n        //empty array to loop over els for API calls\n        let emptyArr = [];\n        //filling array with every number needed for API calls: currently 893 pokemon\n        for (let i = 1; i <= limit; i++) {\n            emptyArr.push(i);\n        };\n        //loop through emptyArr to numerically call data for each pokemon in order and push into pokeList state\n        for (const el of emptyArr) {\n            const pokemon = await pokeapi.get(`/pokemon/${el}`);\n            this.setState((prevState) => {\n                return prevState.pokeList.push(pokemon);\n            });\n        }\n    };\n\n    componentDidMount() {\n        //generating state for all pokemon API fetches\n        this.populatePokeList(this.state.pokeLimit);\n    };\n\n    componentDidUpdate() {\n        if (this.state.pokeList.length === this.state.pokeLimit) {\n            console.log('All current pokemon entries rendered');\n            console.log(`Current entries in mounted component: ${this.state.pokeList.length}`);\n        };\n    };\n\n    onSearchSubmit = async (term) => {\n        const response = await pokeapi.get(`/pokemon/${term}`, {\n            params: { query: term }\n        });\n\n        this.setState({pokeData: response});\n\n        console.log(response);\n    };\n\n    loadMorePokemon = async () => { //NOTE::: pokeLimit and any hardcoded number in this function will need to be updated manually\n        //empty array to loop over els for API calls\n        let emptyArr = [];\n\n        //filling array with every number needed for API calls: currently 893 pokemon\n        for (let i = this.state.pokeLimit + 1; i <= this.state.pokeLimit + 47; i++) {\n            emptyArr.push(i);\n        };\n\n        //updating pokeLimit for incrimental/repeat usage\n        this.setState((prevState) => {\n            return prevState.pokeLimit += 47;\n        });\n\n        //loop through emptyArr to numerically call data for each pokemon in order and push into pokeList state\n        for (const el of emptyArr) {\n            const pokemon = await pokeapi.get(`/pokemon/${el}`);\n            this.setState((prevState) => {\n                return prevState.pokeList.push(pokemon);\n            });\n        };\n    };\n\n    loadAllPokemon = async () => {\n        //empty array to loop over els for API calls\n        let emptyArr = [];\n\n        //filling array with every number needed for API calls: currently 893 pokemon\n        for (let i = this.state.pokeLimit; i <= 893; i++) {\n            emptyArr.push(i);\n        };\n\n        this.setState({pokeLimit: 893});\n\n        //loop through emptyArr to numerically call data for each pokemon in order and push into pokeList state\n        for (const el of emptyArr) {\n            const pokemon = await pokeapi.get(`/pokemon/${el}`);\n            this.setState((prevState) => {\n                return prevState.pokeList.push(pokemon);\n            });\n        };\n    };\n\n    render() {\n        return(\n            <main>\n                <SearchBar\n                    onSubmit={this.onSearchSubmit}\n                />\n                <PokeCard\n                    entries={this.state.pokeList} //all pokemon api data\n                />\n                <LoaderButtons \n                    limit={this.state.pokeLimit}\n                    loadNext={this.loadMorePokemon}\n                    loadAll={this.loadAllPokemon}\n                />\n            </main>\n        ) \n    }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/_base.scss';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}